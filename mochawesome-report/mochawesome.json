{
  "stats": {
    "suites": 4,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-17T15:56:28.396Z",
    "end": "2023-09-17T15:56:40.020Z",
    "duration": 11624,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a56821d5-cb7d-430e-b85e-4d5fae405af7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "26eff58e-2cfa-4228-8af0-c13ccb97870e",
          "title": "POST /public/v2/users",
          "fullFile": "C:\\Users\\acer\\Documents\\Demo_API\\api\\test_demo\\crud_user.js",
          "file": "\\api\\test_demo\\crud_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create user",
              "fullTitle": "POST /public/v2/users Create user",
              "timedOut": false,
              "duration": 1623,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.post(\"/public/v2/users\").set({ Authorization: AUTH }).send({\nname: createUSER.name,\nemail: createUSER.email,\ngender: createUSER.gender,\nstatus: createUSER.status,\n});\n//-- respomse status\nexpect(response.status).to.eql(201);\n//-- response data body\nconsole.log(response.body);",
              "err": {},
              "uuid": "2184d1c8-7fab-44a1-bec2-b4232f8fa1aa",
              "parentUUID": "26eff58e-2cfa-4228-8af0-c13ccb97870e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create user using same Data (Negative Case)",
              "fullTitle": "POST /public/v2/users Create user using same Data (Negative Case)",
              "timedOut": false,
              "duration": 1312,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request\n    .post(\"/public/v2/users\")\n    .set({ Authorization: AUTH })\n    .send({\n    name: createUSER.name,\n    email: createUSER.email,\n    gender: createUSER.gender,\n    status: createUSER.status,\n    });\n//-- response data body\nconsole.log(response.body);\n//-- respomse status\nif (response.statusCode > 422) {\n    console.log(\"API response failed with status code:\", response.statusCode);\n    expect(response.statusCode).to.be.lessThan(422);\n    } else {\n    console.log(\"API response successful with status code:\", response.statusCode);\n    expect(response.statusCode).to.equal(422);\n    }\n    \nconst userEmail = \"testtoday@mail.com\";\nconst emailTakenMessage = response.body.find(\n    (error) => error.field === \"email\" && error.message === \"has already been taken\"\n);\nif (emailTakenMessage) {\n    console.log(`Email \"${userEmail}\" has already been taken.`);\n} else {\n    console.log(`Email \"${userEmail}\" does not have a 'has already been taken' message.`);\n}",
              "err": {},
              "uuid": "c5717e16-3af1-4a8e-93b9-7a9c3ffa01eb",
              "parentUUID": "26eff58e-2cfa-4228-8af0-c13ccb97870e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2184d1c8-7fab-44a1-bec2-b4232f8fa1aa",
            "c5717e16-3af1-4a8e-93b9-7a9c3ffa01eb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2935,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "463348df-3e05-4166-b0a1-17b779c7df45",
          "title": "GET /public/v2/users",
          "fullFile": "C:\\Users\\acer\\Documents\\Demo_API\\api\\test_demo\\crud_user.js",
          "file": "\\api\\test_demo\\crud_user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "All User Detail",
              "fullTitle": "GET /public/v2/users All User Detail",
              "timedOut": false,
              "duration": 1348,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.get(\"/public/v2/users\").set({ Authorization: AUTH })\n\n//-- response data body\nconsole.log(response.body);\n//-- respomse status\nif (response.statusCode > 200) {\n    console.log(\"API response failed with status code:\", response.statusCode);\n    expect(response.statusCode).to.be.lessThan(200);\n    } else {\n    console.log(\"API response successful with status code:\", response.statusCode);\n    expect(response.statusCode).to.equal(200);\n    }\n// Validate each object in the array\nconst expectedProperties = ['id', 'name', 'email', 'gender', 'status'];\n    response.body.forEach((user) => {\nexpect(user).to.be.an('object');\n    expectedProperties.forEach((prop) => {\nexpect(user).to.have.property(prop);\n    });\n});",
              "err": {},
              "uuid": "55d4b597-6fa8-4b9d-a29f-473bf49cb445",
              "parentUUID": "463348df-3e05-4166-b0a1-17b779c7df45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My User Detail",
              "fullTitle": "GET /public/v2/users My User Detail",
              "timedOut": false,
              "duration": 1345,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000)\nconst response = await request.get(\"/public/v2/users\").set({ Authorization: AUTH }).send({\nname: createUSER.name,\nemail: createUSER.email,\ngender: createUSER.gender,\nstatus: createUSER.status,\n    });\n    \n    //-- response data body\n    console.log(response.body);\n    // Save Variable ID \n    createdUserId = response.body[0].id;\n    console.log(\"createdUserId:\", createdUserId);\n\n    //-- respomse status\n    if (response.statusCode > 200) {\nconsole.log(\"API response failed with status code:\", response.statusCode);\nexpect(response.statusCode).to.be.lessThan(200);\n} else {\nconsole.log(\"API response successful with status code:\", response.statusCode);\nexpect(response.statusCode).to.equal(200);\n}\n\n    // Validate each object in the array\n    const expectedProperties = ['id', 'name', 'email', 'gender', 'status'];\nresponse.body.forEach((user) => {\n    expect(user).to.be.an('object');\nexpectedProperties.forEach((prop) => {\n    expect(user).to.have.property(prop);\n});\n    });    \n\n    //-- Periksa apakah status ada atau tidak\n    const userActive = \"active\"; \n    const statusExists = response.body.some((user) => user.status === userActive); \n\n    if (statusExists) {\n    console.log(`Status \"${userActive}\" is in the response.`);\n    response.body.forEach((user) => {\nif (user.status === \"active\") {\n    const userName = user.name;\n    console.log(`User \"${userName}\" is active.`);\n}\n    });\n    } else {\n    console.log(`Status \"${userActive}\" not found in response.`);\n    response.body.forEach((user) => {\nif (user.status === \"inactive\") {\n    const userName = user.name;\n    console.log(`User \"${userName}\" is inactive.`);\n}\n    });\n}",
              "err": {},
              "uuid": "f86198ba-8f43-45c3-a42c-763ecf70cf61",
              "parentUUID": "463348df-3e05-4166-b0a1-17b779c7df45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check user details using empty data (Negative Case)",
              "fullTitle": "GET /public/v2/users Check user details using empty data (Negative Case)",
              "timedOut": false,
              "duration": 1208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000)\nconst response = await request.get(\"/public/v2/users\").set({ Authorization: AUTH }).send({\n    name: userOne.name,\n    email: userOne.email,\n    gender: userOne.gender,\n    status: userOne.status,\n});\n\nconsole.log(response.body);\n//-- respomse status\nif (response.statusCode > 200) {\nconsole.log(\"API response failed with status code:\", response.statusCode);\nexpect(response.statusCode).to.be.lessThan(200);\n} else {\nconsole.log(\"API response successful with status code:\", response.statusCode);\nexpect(response.statusCode).to.equal(200);\n}\n// Memeriksa apakah data ada atau tidak\nif (Array.isArray(response.body) && response.body.length > 0) {\nconsole.log(\"Data exists in the response.\");\n} else {\nconsole.log(\"Data does not exist in the response.\");\n}",
              "err": {},
              "uuid": "cac800cc-6391-472f-be48-e8b8c4c6c239",
              "parentUUID": "463348df-3e05-4166-b0a1-17b779c7df45",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "7f95cbcf-ddde-484a-b91a-c9c5b385e353",
              "title": "PUT /public/v2/users",
              "fullFile": "C:\\Users\\acer\\Documents\\Demo_API\\api\\test_demo\\crud_user.js",
              "file": "\\api\\test_demo\\crud_user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Update Data User Name & Email",
                  "fullTitle": "GET /public/v2/users PUT /public/v2/users Update Data User Name & Email",
                  "timedOut": false,
                  "duration": 1219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nconst response = await request.put(`/public/v2/users/${createdUserId}`).set({ Authorization: AUTH }).send({\n    name: updateUser.name,\n    email: updateUser.email,\n    gender: updateUser.gender,\n    status: updateUser.status,\n});\n\n// -- respomse status\nif (response.statusCode > 200) {\n    console.log(\"API response failed with status code:\", response.statusCode);\n    expect(response.statusCode).to.be.lessThan(200);\n    } else {\n    console.log(\"API response successful with status code:\", response.statusCode);\n    expect(response.statusCode).to.equal(200);\n    }\n//-- response data body\nconsole.log(response.body);\nconsole.log(\"createdUserId:\", createdUserId);\nsetTimeout(function() {\n    const oldName = createUSER.name;\n    const updatedName = updateUser.name;\n    const responseContent = response.body;\n    \n    if (Array.isArray(responseContent)) {\n        // Handle the case where responseContent is an array\n        expect(responseContent).to.be.an('array');\n\n    let nameUpdated = false;\n        responseContent.forEach((user) => {\n            if (user.name === updatedName) {\n                nameUpdated = true;\n                console.log(`Name \"${updatedName}\" has been successfully updated.`);\n            } else if (user.name === oldName) {\n                nameUpdated = false;\n            }\n        });\n\n    expect(nameUpdated).to.be.true;\n    } else if (typeof responseContent === 'object' && responseContent !== null) {\n        expect(responseContent).to.have.property('name').equal(updatedName);\n        console.log(`Name \"${updatedName}\" has been successfully updated.`);\n    } else {\n        console.error(\"Unexpected response format.\");\n    }\n}, 1000);",
                  "err": {},
                  "uuid": "8d00abf6-cd9e-45fd-8e5a-089b73f9dbcd",
                  "parentUUID": "7f95cbcf-ddde-484a-b91a-c9c5b385e353",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update Data With Same Data ",
                  "fullTitle": "GET /public/v2/users PUT /public/v2/users Update Data With Same Data ",
                  "timedOut": false,
                  "duration": 919,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request.put(`/public/v2/users/${createdUserId}`).set({ Authorization: AUTH }).send({\n        email: sameData.email,\n    });\n    \n    // -- respomse status\n    if (response.statusCode > 200) {\n        console.log(\"API response failed with status code:\", response.statusCode);\n        expect(response.statusCode).to.be.lessThan(200);\n        } else {\n        console.log(\"API response successful with status code:\", response.statusCode);\n        expect(response.statusCode).to.equal(200);\n        }\n    //-- response data body\n    console.log(response.body);\n    console.log(\"createdUserId:\", createdUserId);\n    setTimeout(async () => {\n        const emailMessage = \"has already been taken\";\n        const emailMessages = response.body.map((error) => error.message);\n            if (emailMessages.includes(emailMessage)) {\n            console.log(`Email \"${emailMessage}\" is in the response.`);\n            } else {\n            console.log(`Validation error: \"${emailMessage}\" not found in response.`);\n            }\n            done();\n        }, 2000);",
                  "err": {},
                  "uuid": "94405f1c-08f0-4f5c-b7b9-b7a5c2646fb5",
                  "parentUUID": "7f95cbcf-ddde-484a-b91a-c9c5b385e353",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d00abf6-cd9e-45fd-8e5a-089b73f9dbcd",
                "94405f1c-08f0-4f5c-b7b9-b7a5c2646fb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2138,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "7ec5fa3e-27c2-4c2b-92b3-9f708439466a",
              "title": "Delete /public/v2/users",
              "fullFile": "C:\\Users\\acer\\Documents\\Demo_API\\api\\test_demo\\crud_user.js",
              "file": "\\api\\test_demo\\crud_user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Delete User",
                  "fullTitle": "GET /public/v2/users Delete /public/v2/users Delete User",
                  "timedOut": false,
                  "duration": 1295,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request.delete(`/public/v2/users/${createdUserId}`).set({ Authorization: AUTH }).send({\n        name: deleteUser.name,\n        email: deleteUser.email,\n        gender: deleteUser.gender,\n        status: deleteUser.status,\n    });\n    \n    // -- respomse status\n    if (response.statusCode > 204) {\n        console.log(\"API response failed with status code:\", response.statusCode);\n        expect(response.statusCode).to.be.lessThan(204);\n        } else {\n        console.log(\"API response successful with status code:\", response.statusCode);\n        expect(response.statusCode).to.equal(204);\n        }\n    //-- response data body\n    console.log(response.body);\n    setTimeout(async () => {\n        const dataMessage = \"has already been taken\";\n        const dataMessages = response.body.map((error) => error.message);\n            if (dataMessages.includes(dataMessage)) {\n            console.log(`Email \"${dataMessage}\" is in the response.`);\n            } else {\n            console.log(`Validation error: \"${dataMessage}\" not found in response.`);\n            }\n            done();\n        }, 2000);",
                  "err": {},
                  "uuid": "887b0b8d-8e07-487c-9da7-22bf8d92cdaa",
                  "parentUUID": "7ec5fa3e-27c2-4c2b-92b3-9f708439466a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check user data whether it still exists or not",
                  "fullTitle": "GET /public/v2/users Delete /public/v2/users Check user data whether it still exists or not",
                  "timedOut": false,
                  "duration": 1335,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request.delete(`/public/v2/users/${createdUserId}`).set({ Authorization: AUTH }).send({\n            name: deleteUser.name,\n            email: deleteUser.email,\n            gender: deleteUser.gender,\n            status: deleteUser.status,\n        });\n        \n        // -- respomse status\n        if (response.statusCode > 404) {\n            console.log(\"API response failed with status code:\", response.statusCode);\n            expect(response.statusCode).to.be.lessThan(404);\n            } else {\n            console.log(\"API response successful with status code:\", response.statusCode);\n            expect(response.statusCode).to.equal(404);\n            }\n    \n        //-- response data body\n        console.log(response.body);\n        setTimeout(async () => {\n            const dataMessage = \"has already been taken\";\n            const dataMessages = response.body.map((error) => error.message);\n                if (dataMessages.includes(dataMessage)) {\n                console.log(`Email \"${dataMessage}\" is in the response.`);\n                } else {\n                console.log(`Validation error: \"${dataMessage}\" not found in response.`);\n                }\n                done();\n            }, 2000);",
                  "err": {},
                  "uuid": "ac23b58f-5a68-4906-8c8d-440cd9a12bc0",
                  "parentUUID": "7ec5fa3e-27c2-4c2b-92b3-9f708439466a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "887b0b8d-8e07-487c-9da7-22bf8d92cdaa",
                "ac23b58f-5a68-4906-8c8d-440cd9a12bc0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2630,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [
            "55d4b597-6fa8-4b9d-a29f-473bf49cb445",
            "f86198ba-8f43-45c3-a42c-763ecf70cf61",
            "cac800cc-6391-472f-be48-e8b8c4c6c239"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3901,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}